/*
 * opensha-ucerf3 dependencies
 */

//apply from: '../opensha-ucerf3/build.gradle'
apply from: '../opensha-commons/build-common.gradle'

apply plugin: 'jacoco'

dependencies {
    
    compileOnly project(path: ':opensha-ucerf3', configuration: 'compileOnly')
    compileAndResource project(path: ':opensha-ucerf3')

    compileAndResource 'com.google.code.gson:gson:2.8.5'
    compileAndResource 'commons-cli:commons-cli:1.4'

    testCompile 'junit:junit:4.12'
}

sourceSets {

    main {
        java {
            srcDirs = ['src/main/java']
            exclude 'resources/'
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test/resources']
            exclude '**/*.java'
        }
    }
}

test {
    exclude 'org/opensha/**'
    exclude '**/DataSuite'
    filter {
        includeTestsMatching('*NSHM_NZ.*')
        getIncludePatterns().remove('*Suite*')
    }
}

task localTests( type: Test, dependsOn: testClasses ){
    //filter { excludeTestsMatching('*.opensha.commons.*')} 
    filter { includeTestsMatching('*NSHM_NZ.*')}
    filter { includeTestsMatching('*UCERF3.inversion.*')}
    //filter { excludeTestsMatching 'generic.*' } 
    // excludes a whole package, "generic". NB this is not a regex:
    // '*' is simply "wildcard" and dot means dot ... other more 
    // sophisticated "ANT-style" patterns are available in class Test

    //filter { excludeTestsMatching '*_FT' } 
    // also exclude all test classes ending in "_FT" (e.g. for "functional test")
}


jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(
        dir: it,
        exclude: ['**/util/**', ])
      })
  }
}
check.dependsOn jacocoTestReport

jacocoTestCoverageVerification {
  violationRules {
    rule  {
      element = 'CLASS'
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 1.0
      }
    }
  }
}


