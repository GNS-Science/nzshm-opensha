plugins {
    id 'pmd'
    id 'com.diffplug.spotless' version '6.13.0'
    id 'jacoco'
}

apply plugin: 'java-library'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
compileJava.options.encoding = "UTF-8"

apply from: '../opensha/build-git.gradle'

dependencies {
    /* no remote repo */
    implementation files('python/share/py4j/py4j0.10.9.1.jar', //Py4j jar installed locally  via `pip install py4j`
    'lib/openmap.jar')
    implementation project(path: ':opensha')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.5.13'
    implementation 'org.apache.parquet:parquet-avro:1.15.1'

    implementation("org.apache.hadoop:hadoop-common:3.4.1") {
        exclude group: 'org.apache.curator', module: 'curator-recipes'
        exclude group: 'org.apache.kerby', module: 'kerb-core'
        exclude group: 'org.apache.avro', module: 'avro'
        exclude group: 'org.apache.curator', module: 'curator-client'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.kerby', module: 'kerb-simplekdc'
        exclude group: 'org.apache.hadoop', module: 'hadoop-annotations'
        exclude group: 'org.apache.hadoop.thirdparty', module: 'hadoop-shaded-protobuf_3_7'
        exclude group: 'org.apache.commons', module: 'commons-text'
        exclude group: 'org.apache.commons', module: 'commons-math3'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'org.eclipse.jetty', module: 'jetty-server'
        exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'
        exclude group: 'org.eclipse.jetty', module: 'jetty-webapp'
        exclude group: 'org.eclipse.jetty', module: 'jetty-util'
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'javax.servlet.jsp', module: 'jsp-api'
        exclude group: 'com.sun.jersey', module: 'jersey-json'
        exclude group: 'com.sun.jersey', module: 'jersey-core'
        exclude group: 'com.sun.jersey', module: 'jersey-servlet'
        exclude group: 'com.sun.jersey', module: 'jersey-server'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
        exclude group: 'commons-codec', module: 'commons-codec'
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'commons-net', module: 'commons-net'
        exclude group: 'commons-cli', module: 'commons-cli'
        exclude group: 'commons-pool', module: 'commons-pool'
        exclude group: 'ch.qos.reload4j', module: 'reload4j'
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        exclude group: 'com.jcraft', module: 'jsch'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'dnsjava', module: 'dnsjava'
        exclude group: 'log4j', module: 'log4j'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://code.usgs.gov/api/v4/groups/1352/-/packages/maven"
        name "NSHMP GitLab Group"
    }
}

configurations {
    apiResolvable {
        description 'resolvable extension of the api classpath'
        canBeResolved=true
        extendsFrom api
    }
}

jar {
    into 'resources', {
        from 'src/main/java/resources'
    }
}

sourceSets {

    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDirs = ['src/integration/java']
        }

        resources {
            srcDirs = ['src/integration/resources', 'src/main/java']
        }
    }

    smokeTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDirs = ['src/smokeTest/java']
        }
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
    smokeTestImplementation.extendsFrom implementation
    smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    intTestImplementation 'junit:junit:4.12'
    intTestImplementation 'com.google.jimfs:jimfs:1.1'
    smokeTestImplementation 'junit:junit:4.12'
}

task fatJar(type: Jar, dependsOn: ':opensha:fatJar') {

    doFirst {->
        writeBuildFiles("/nzshm-build")
    }
    doLast {
        delete new File(projectDir, "nzshm-build.githash")
        delete new File(projectDir, "nzshm-build.gitbranch")
        delete new File(projectDir, "nzshm-build.gitremoteurl")
        delete new File(projectDir, "nzshm-build.date")
    }

    baseName = project.name + '-all'
    from {
        configurations.apiResolvable.collect { it.isDirectory() ? it : zipTree(it).matching {
            exclude { it.path.contains('META-INF') }
        }}
    }
    from(project.projectDir) {
        include 'nzshm-build.githash'
        include 'nzshm-build.gitbranch'
        include 'nzshm-build.gitremoteurl'
        include 'nzshm-build.date'
    }

    // include compiled source from this project
    from sourceSets.main.allJava
    // include upstream project fat jar
    from zipTree(file('../opensha/build/libs/opensha-all.jar'))
    from zipTree(file('python/share/py4j/py4j0.10.9.1.jar'))

    duplicatesStrategy = 'exclude'
      //  from sourceSets.main.allJava
    with jar
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    shouldRunAfter test
}

check.dependsOn integrationTest

task smokeTest(type: Test) {
    description = 'Runs Smoke Tests.'
    group = 'verification'

    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath

    shouldRunAfter test
}

task pmd(type:GradleBuild) {
    tasks = ['pmdMain', 'pmdTest', 'pmdIntTest', 'pmdSmokeTest' ]
}

test {
    // exclude expensive opensha tests unless flag is set on command line
    if (!providers.gradleProperty("openshaTest").forUseAtConfigurationTime().isPresent()) {
        project.gradle.startParameter.excludedTaskNames.add("opensha:test")
    }
    filter {
        includeTestsMatching('*NZSHM22.*')
        includeTestsMatching('*nz.cri.gns.*')
        includeTestsMatching('*UCERF3.inversion.*')
    }

    //filter { excludeTestsMatching 'generic.*' }
    // excludes a whole package, "generic". NB this is not a regex:
    // '*' is simply "wildcard" and dot means dot ... other more
    // sophisticated "ANT-style" patterns are available in class Test

    //filter { excludeTestsMatching '*_FT' }
    // also exclude all test classes ending in "_FT" (e.g. for "functional test")
}

// PMD enforces Java best practices https://docs.pmd-code.org/latest/pmd_rules_java.html
pmd {
    // We have hundreds of failures at the moment. Set this to false once it's fixed.
    ignoreFailures = true
}

// spotless enforces Java style rules.
spotless {
    java {
        removeUnusedImports()
        // apply AOSP code style https://source.android.com/docs/setup/contribute/code-style
        googleJavaFormat().aosp()
    }
}

// jacoco generates coverage reports
jacocoTestReport {
    reports {
        // XML is require for the github action
        xml.required = true
    }
}


