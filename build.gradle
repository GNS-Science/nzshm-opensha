/*
 * opensha-ucerf3 dependencies
 */

//apply from: '../opensha-ucerf3/build.gradle'
apply from: '../opensha-commons/build-common.gradle'

apply plugin: 'jacoco'

dependencies {

    compileOnly project(path: ':opensha-ucerf3', configuration: 'compileOnly')
    compileAndResource project(path: ':opensha-ucerf3')

    compileAndResource 'com.google.code.gson:gson:2.8.5'
    compileAndResource 'commons-cli:commons-cli:1.4'

    /* no remote repo */
    compileAndResource files('python/share/py4j/py4j0.10.9.1.jar') //Py4j jar installed locally  via `pip install py4j`

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:3.5.13'
}

sourceSets {

    main {
        java {
            srcDirs = ['src/main/java']
            exclude 'resources/'
        }
    }

    test {
        java {
            srcDirs = ['test/java']
        }
        resources {
            srcDirs = ['test/resources']
            exclude '**/*.java'
        }
    }

    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDirs = ['src/integration/java']
        }

        resources.srcDir('src/integration/resources')
        resources {
            srcDirs = ['src/integration/resources']
        }
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    intTestImplementation 'junit:junit:4.12'
    intTestImplementation 'com.google.jimfs:jimfs:1.1'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    shouldRunAfter test
}

check.dependsOn integrationTest

test {
    exclude 'org/opensha/**'
    exclude '**/DataSuite'
    filter {
        includeTestsMatching('*NSHM_NZ.*')
        getIncludePatterns().remove('*Suite*')
    }
}

task localTests(type: Test, dependsOn: testClasses) {
    //filter { excludeTestsMatching('*.opensha.commons.*')} 
    filter { includeTestsMatching('*NSHM_NZ.*') }
    filter { includeTestsMatching('*nz.cri.gns.*') }
    filter { includeTestsMatching('*UCERF3.inversion.*') }
    //filter { excludeTestsMatching 'generic.*' } 
    // excludes a whole package, "generic". NB this is not a regex:
    // '*' is simply "wildcard" and dot means dot ... other more 
    // sophisticated "ANT-style" patterns are available in class Test

    //filter { excludeTestsMatching '*_FT' } 
    // also exclude all test classes ending in "_FT" (e.g. for "functional test")
}




jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: ['**/util/**',])
        })
    }
}
check.dependsOn jacocoTestReport

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}


