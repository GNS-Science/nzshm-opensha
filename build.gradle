
apply plugin: 'java-library'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
compileJava.options.encoding = "UTF-8"

dependencies {

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.jfree:jfreechart:1.5.2'
    implementation 'org.dom4j:dom4j:2.1.1'
    implementation 'edu.stanford.ejalbert:BrowserLauncher2:1.3'
    implementation 'com.itextpdf:itextpdf:5.5.13.2'
    implementation 'gov.nist.math:jama:1.0.3'
    implementation 'javax.servlet:javax.servlet-api:3.1.0'
    implementation 'javax.mail:mail:1.4.7'
    implementation 'org.apache.poi:poi:3.16'
    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.atlassian.commonmark:commonmark:0.10.0'
    implementation 'com.atlassian.commonmark:commonmark-ext-gfm-tables:0.10.0'
    implementation 'com.atlassian.commonmark:commonmark-ext-heading-anchor:0.10.0'

    /* no remote repo */
    api files('python/share/py4j/py4j0.10.9.1.jar') //Py4j jar installed locally  via `pip install py4j`

    api project(path: ':opensha')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:3.5.13'
}

repositories {
    jcenter()
}

configurations {
    apiResolvable {
        description 'resolvable extension of the api classpath'
        canBeResolved=true
        extendsFrom api
    }
}

jar {
    into 'resources', {
        from 'src/main/java/resources'
    }
}

sourceSets {

    main {
        java {
            srcDirs = ['src/main/java']
        }
	resources {
	    exclude '**/resources/**'
	}
    }

    test {
        java {
            srcDirs = ['test/java']
        }
        resources {
            srcDirs = ['test/resources']
            exclude '**/*.java'
        }
    }

    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDirs = ['src/integration/java']
        }

        resources {
            srcDirs = ['src/integration/resources', 'src/main/java']
        }
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    intTestImplementation 'junit:junit:4.12'
    intTestImplementation 'com.google.jimfs:jimfs:1.1'
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from {
        configurations.apiResolvable.collect { it.isDirectory() ? it : zipTree(it).matching {
            exclude { it.path.contains('META-INF') }
        }}
    }

    duplicatesStrategy = 'exclude'
        from sourceSets.main.allJava
    with jar
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    shouldRunAfter test
}

check.dependsOn integrationTest

test {
    exclude 'org/opensha/**'
    exclude '**/DataSuite'
    filter {
        includeTestsMatching('*NZSHM22.*')
        getIncludePatterns().remove('*Suite*')
    }
}

task localTests(type: Test, dependsOn: testClasses) {
    //filter { excludeTestsMatching('*.opensha.commons.*')}
    filter { includeTestsMatching('*NZSHM22.*') }
    filter { includeTestsMatching('*nz.cri.gns.*') }
    filter { includeTestsMatching('*UCERF3.inversion.*') }
    //filter { excludeTestsMatching 'generic.*' }
    // excludes a whole package, "generic". NB this is not a regex:
    // '*' is simply "wildcard" and dot means dot ... other more
    // sophisticated "ANT-style" patterns are available in class Test

    //filter { excludeTestsMatching '*_FT' }
    // also exclude all test classes ending in "_FT" (e.g. for "functional test")
}

