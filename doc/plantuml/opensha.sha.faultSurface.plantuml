@startuml
package org.opensha.sha.faultSurface {

interface RuptureSurface extends Surface3D {
 This interface defines a rupture surfaces. This does not specify how a rupture 
 surface is to be represented in order to maintan flexibility, but rather 
 specifies what information a rupture surface needs to provide ..
 ---
 +getAveDip();
 +getAveStrike();
 +getAveLength();
 ...
 +getLastLocOnUpperEdge();
 +getFractionOfSurfaceInRegion()
}

interface EvenlyGriddedSurface extends RuptureSurface 

class AbstractEvenlyGriddedSurface implements EvenlyGriddedSurface, CacheEnabledSurface {
 This represents 2D container of Location objects defining a geographical surface.
 
 There are no constraints on what locations are put where - this is specified by subclasses,
 but the presumption is that the the grid of locations map out the surface 
 in some evenly discretized way.
 It is also presumed that the zeroeth row represent the top edge or trace. 
  
 There are also methods for getting info about the surface 
 e.g., ave dip, ave strike, and various distance metrics.
}
abstract class AbstractEvenlyGriddedSurfaceWithSubsets extends AbstractEvenlyGriddedSurface {
 This class extends EvenlyGriddedSurface to included sampling subset regions.
}

abstract class EvenlyGriddedSurfFromSimpleFaultData extends AbstractEvenlyGriddedSurfaceWithSubsets {
 Description: This creates and EvenlyGriddedSurface from SimpleFaultData
} 

class StirlingGriddedSurface extends EvenlyGriddedSurfFromSimpleFaultData
class ApproxEvenlyGriddedSurface extends AbstractEvenlyGriddedSurfaceWithSubsets

class CompoundSurface implements RuptureSurface, CacheEnabledSurface {
 This class represents compound RuptureSurface to represent multi-fault ruptures. 
 The most challenging thing here is maintaining the Aki Richards convention for the total
 surface.  The main method here was used to make various tests to ensure that these things are
 handled properly - these data were analyzed externally using Igor.
}

class QuadSurface implements RuptureSurface, CacheEnabledSurface {
 Quadrilateral surface implementation - treats calculating the shortest distance
 as 2D problem. The parallelograms representing each fault segment are rotated
 into the xy plane of a local cartesian coordinate system. Precalculating and
 storing the 2D parallelograms and the required rotation matrices drastically
 reduces the time required to calculate the minimum distance to a large fault
 surface, although performance is similar/worse than the standard gridded
 implementation for short ~10 km faults.
 
 @author Peter Powers, Kevin Milner
}

class SimpleFaultData {
 -upperSeismogenicDepth
 -lowerSeismogenicDepth
 -aveDip
 -aveDipDir
 -FaultTrace
}

class FaultTrace extends LocationList {
 This simply contains a vector/array of Location
 objects representing the top trace of a fault with non-zero depth if it
 buried.
}

}
package scratch.UCERF3 { 
 class FaultSystemRupSet
}

EvenlyGriddedSurfFromSimpleFaultData --> SimpleFaultData
SimpleFaultData --> FaultTrace
FaultSystemRupSet --> CompoundSurface
FaultSystemRupSet --> QuadSurface
FaultSystemRupSet --> StirlingGriddedSurface
FaultSystemRupSet --> EvenlyGriddedSurface
FaultSystemRupSet --> FaultTrace
@enduml